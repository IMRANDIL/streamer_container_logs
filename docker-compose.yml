version: '3.8'

services:
  service1:
    build: ./backend/service1
    ports:
      - "4000:4000"
    depends_on:
      - kafka
      - postgres

  service2:
    build: ./backend/service2
    ports:
      - "4001:4001"
    depends_on:
      - kafka
      - postgres

  service3:
    build: ./backend/service3
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - postgres

  log-stream-service:
    build: ./backend/log-stream-service
    ports:
      - "5000:5000"
    depends_on:
      - kafka
      - postgres

  log-writer:
    build:
      context: ./backend/worker
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres

  frontend:
    build: ./frontend
    ports:
      - "80:4173"
    depends_on:
      - log-stream-service

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: logs_db
    ports:
      - "5432:5432"

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "logTopic:1:1" # Create a 'logTopic' with one partition and one replica
    depends_on:
      - zookeeper
